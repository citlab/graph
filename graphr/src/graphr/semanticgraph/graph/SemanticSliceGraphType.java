package graphr.semanticgraph.graph;

import graphr.semanticgraph.SemanticSliceCreator;
import graphr.semanticgraph.slicecreator.LemmataGraphCreator;
import graphr.semanticgraph.slicecreator.LemmataWithStopwordRemovalGraphCreator;
import graphr.semanticgraph.slicecreator.TokenGraphCreator;
import graphr.semanticgraph.slicecreator.TokenNLPDependencyGraphCreator;
import graphr.semanticgraph.slicecreator.WiktionaryLemmaGraphCreator;
import graphr.semanticgraph.slicecreator.WiktionarySenseGraphCreator;

/**
 * This enum represents all creator class implementations, which the
 * SemanticGraphGenerator can use to create a SemanticSliceGraph. Please extend
 * this enum, when you need to use a new CreatorClass implementation.
 *
 * @author Florian
 */
public enum SemanticSliceGraphType {

    /**
     * Lemma slice creator generated by Stanford NLP
     */
    LEMMATA("Lemma", LemmataGraphCreator.class),
    /**
     * Token slice creator
     */
    TOKEN("Token", TokenGraphCreator.class),
    /**
     * Token slice creator with Stanford NLP dependency arcs
     */
    TOKEN_WITH_NLPCLUSTER("Token", TokenNLPDependencyGraphCreator.class),
    /**
     * Lemma slice creator generated by Wiktionary
     */
    WIKTIONARY_LEMMATA("WiktionaryLemma", WiktionaryLemmaGraphCreator.class),
    /**
     * Sense slice creator generated by Wiktionary
     */
    SENSEGRAPH("Sense", WiktionarySenseGraphCreator.class),
    /**
     * Lemma slice creator generated by Stanford NLP with Stopword removal
     */
    LEMMATA_WITH_STOPWORD_REMOVAL("Lemma", LemmataWithStopwordRemovalGraphCreator.class);

    private final Class creatorClass;
    private final String sliceName;
    private final String incommingEdgeName;

    private SemanticSliceGraphType(String sliceName, Class creatorClass) {
        if (creatorClass.getInterfaces().length > 0) {
            if (!creatorClass.getInterfaces()[0].isAssignableFrom(SemanticSliceCreator.class)) {
                throw new ClassCastException("Class not a SemanticSliceCreator");
            }
        } else if (creatorClass.getInterfaces().length == 0) {
            throw new ClassCastException("Class not a SemanticSliceCreator");
        }

        this.creatorClass = creatorClass;
        this.sliceName = sliceName;
        this.incommingEdgeName = "has" + sliceName;
    }

    /**
     *
     * @return creator class, which can create the semantic slice
     */
    public Class getCreator() {
        return this.creatorClass;
    }

    /**
     *
     * @return representive name of the slice
     */
    public String getSliceName() {
        return this.sliceName;
    }

    /**
     *
     * @return name for incomming edges
     */
    public String getIncommingEdgeName() {
        return this.incommingEdgeName;
    }
}
